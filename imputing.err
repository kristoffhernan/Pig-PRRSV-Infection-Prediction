[NbConvertApp] Converting notebook imputing.ipynb to pdf
0.00s - Debugger warning: It seems that frozen modules are being used, which may
0.00s - make the debugger miss breakpoints. Please pass -Xfrozen_modules=off
0.00s - to python to disable frozen modules.
0.00s - Note: Debugging will proceed. Set PYDEVD_DISABLE_FILE_VALIDATION=1 to disable this validation.
Traceback (most recent call last):
  File "/usr/local/linux/mambaforge-3.11/bin/jupyter-nbconvert", line 10, in <module>
    sys.exit(main())
             ^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/jupyter_core/application.py", line 276, in launch_instance
    return super().launch_instance(argv=argv, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/traitlets/config/application.py", line 985, in launch_instance
    app.start()
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 423, in start
    self.convert_notebooks()
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 597, in convert_notebooks
    self.convert_single_notebook(notebook_filename)
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 560, in convert_single_notebook
    output, resources = self.export_single_notebook(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/nbconvertapp.py", line 488, in export_single_notebook
    output, resources = self.exporter.from_filename(
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 189, in from_filename
    return self.from_file(f, resources=resources, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 206, in from_file
    return self.from_notebook_node(
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/exporters/pdf.py", line 181, in from_notebook_node
    latex, resources = super().from_notebook_node(nb, resources=resources, **kw)
                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/exporters/latex.py", line 74, in from_notebook_node
    return super().from_notebook_node(nb, resources, **kw)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/exporters/templateexporter.py", line 397, in from_notebook_node
    nb_copy, resources = super().from_notebook_node(nb, resources, **kw)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 146, in from_notebook_node
    nb_copy, resources = self._preprocess(nb_copy, resources)
                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/exporters/exporter.py", line 335, in _preprocess
    nbc, resc = preprocessor(nbc, resc)
                ^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/preprocessors/base.py", line 47, in __call__
    return self.preprocess(nb, resources)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/preprocessors/execute.py", line 89, in preprocess
    self.preprocess_cell(cell, resources, index)
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbconvert/preprocessors/execute.py", line 110, in preprocess_cell
    cell = self.execute_cell(cell, index, store_history=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/jupyter_core/utils/__init__.py", line 160, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/asyncio/base_events.py", line 650, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbclient/client.py", line 1021, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/linux/mambaforge-3.11/lib/python3.11/site-packages/nbclient/client.py", line 915, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
ln_mods_poly = []

def regress_lm(df, gene, n):
    # individual models
    lm = LinearRegression()

    x = df['day'].values.reshape(-1,1)
    y = df[gene].values.reshape(-1,1).ravel()
    lm.fit(x,y)
    
    ln_mods_poly.append(lm)
    
    lin = np.arange(0,29).reshape(-1, 1) 
    preds = lm.predict(lin)
    
    ax = plt.subplot(5, 6, n + 1)
    plt.scatter(df['day'], df[gene])
    plt.plot(lin, preds, color='red')
    plt.title(gene)
    

plt.figure(figsize=(22, 15))
plt.subplots_adjust(hspace=0.5)

for i, gene in enumerate(gdn_keep.columns):
    
    if gene != 'dpi':

        regress(poly_df2, gene, i)
        
        
        
df_mods_poly = []

def regress_rf(df, gene, n):
    
    param_grid = {
        'max_depth': [5, 10, 20, None],
        'min_samples_split': [2, 5, 10],
        'min_samples_leaf': [1, 2, 4],
        'max_features': ['sqrt', 'log2', None]
    }

    # Create the Decision Tree Regressor object
    dt = DecisionTreeRegressor()

    # Create a K-Fold cross-validator with 5 splits
    kf = KFold(n_splits=3, shuffle=True, random_state=42)

    # Create the Grid Search object with the parameter grid and K-Fold cross-validator
    grid_search = GridSearchCV(dt, param_grid, cv=kf, n_jobs=3)

    x = df['day'].values.reshape(-1,1)
    y = df[gene].values.reshape(-1,1).ravel()
    
    # Fit the Grid Search object to the data
    grid_search.fit(x, y)

    # Print the best parameters and score
    best_params = grid_search.best_params_
        
    df_func = DecisionTreeRegressor(max_depth = best_params['max_depth'],
                              min_samples_split = best_params['min_samples_split'],
                              min_samples_leaf = best_params['min_samples_leaf'],
                              max_features = best_params['max_features'])
    
    df_mods_poly.append(df_func)
    
    df_func.fit(x,y)
    
    lin = np.arange(0,29).reshape(-1, 1) 
    preds = df_func.predict(lin)
    
    ax = plt.subplot(5, 6, n + 1)
    plt.scatter(df['day'], df[gene])
    plt.plot(lin, preds, color='red')
    plt.title(gene)
    

plt.figure(figsize=(22, 15))
plt.subplots_adjust(hspace=0.5)

for i, gene in enumerate(gdn_keep.columns):
    
    if gene != 'dpi':

        regress_rf(poly_df2, gene, i)
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[15], line 29[0m
[1;32m     25[0m [38;5;28;01mfor[39;00m i, gene [38;5;129;01min[39;00m [38;5;28menumerate[39m(gdn_keep[38;5;241m.[39mcolumns):
[1;32m     27[0m     [38;5;28;01mif[39;00m gene [38;5;241m!=[39m [38;5;124m'[39m[38;5;124mdpi[39m[38;5;124m'[39m:
[0;32m---> 29[0m         [43mregress[49m(poly_df2, gene, i)
[1;32m     33[0m df_mods_poly [38;5;241m=[39m []
[1;32m     35[0m [38;5;28;01mdef[39;00m [38;5;21mregress_rf[39m(df, gene, n):

[0;31mNameError[0m: name 'regress' is not defined
NameError: name 'regress' is not defined

